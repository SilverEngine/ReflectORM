\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename ./Query.info
@settitle Query class
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@finalout
@titlepage
@title Query class
@author Matija
@end titlepage

@contents

@ifnottex
@node Top
@top Query class
@end ifnottex

@menu
* About Query::
* Building quries::
* Working with schema::
* Executing queries::
* Working with objects::
* QueryObject::

@detailmenu
--- The Detailed Node Listing ---

Building quries

* Query methods::
* Query parts::
* Inserting data::
* Updating data::

Query methods

* From::
* Join::
* Where and Having::
* GroupBy::
* Order::
* Limit::
* Union::

Query parts

* Raw::
* Literal::
* Value::
* Fn::
* Column::
* Name::
* JoinCondition::
* Table::
Working with schema

* Droping table::
* Creating table::
* Alter table::

Creating table

* Column types::
* Column modifiers::
* Column references::
* Table modifiers::
Working with objects

* Using objects::
* Name conflicts::
* Joining with objects::

Joining with objects

* Relation definitions::
@end detailmenu
@end menu



@node About Query
@chapter About Query

Query is class which helps us to build SQL query and get result from
database.

With using Query class we have next advantages:
@enumerate
@item
All values are properly escaped.
@item
Same query can be executed on different databases.
@item
Easy use of transactions and sub-transactions (aka savepoints)
@item
@dots{}
@end enumerate

@node Building quries
@chapter Building quries

@example
Query::select('column')
    ->from('table')
    ->where('column2', '=', 'value')
    ->orderBy('column3', 'asc')
    ->limit(2);
@end example

This is an example query which, give us following result:

@example
SELECT `column` FROM `table` WHERE `column2` = ? ORDER BY `column3` ASC LIMIT 2;
-- values: ['value']
@end example

First when we want to create query, we call one of next functions
which give use specialized Query for our statement:
@table @samp
@item ::select()
@indicateurl{System/Database/Query/Select.php}
@item ::delete()
@indicateurl{System/Database/Query/Delete.php}
@item ::update()
@indicateurl{System/Database/Query/Update.php}
@item ::insert()
@indicateurl{System/Database/Query/Insert.php}
@item ::drop()
@indicateurl{System/Database/Query/Drop.php}
@item ::create()
@indicateurl{System/Database/Query/Create.php}
@item ::alter()
@indicateurl{System/Database/Query/Alter.php}
@end table


When we get query, we methods of this query. Because more queries
uses same methods, they are stored separated and included as Traits.
@menu
* Query methods::
* Query parts::
* Inserting data::
* Updating data::
@end menu

@node Query methods
@section Query methods

Each provided method accept values which are known as Query
parts. Query part type is written before variable name (only in
this documentation).

What can we pass for Query part is described in @ref{Query parts,Query parts}
chapter.
@menu
* From::
* Join::
* Where and Having::
* GroupBy::
* Order::
* Limit::
* Union::
@end menu

@node From
@subsection From

@table @samp
@item from($table, $alias = null, Column $id1 = null, Column $id2 = null)
         From which table we select data.
@end table
@example
$q->from('table');
$q->from('table', 't');
$q->from('table t');
$q->from('table2', 't2', 't1.id', 't2.id_table1');
$q->from('table2 t2', 't1.id', 't2.id_table1');
$q->from('table2', 't1.id', 'table2.id_table1');
@end example

We can pass subquery too:

@example
$q->from(Query::select()->from('other'), 'alias_must_exists');
// or
$q->from(function() @{
    return Query::select()->from('tbl')->whereActive(true);
@}, 'alias');
@end example

@node Join
@subsection Join

@table @samp
@item join(Table $table, JoinCondition $condition)
Inner join table
@item leftJoin(Table $table, JoinCondition $condition)
Left join table
@item rightJoin(Table $table, JoinCondition $condition)
Right join table
@end table



@example
$q->join('table', ['table.id', 'other_table.id']);
@end example

@node Where and Having
@subsection Where and Having

@itemize
@item
where(Column $column, Raw $operator, Value $value, string $how = 'and', boolean $not = false)
@item
having(Column $column, Raw $operator, Value $value, string $how = 'and', boolean $not = false)
@end itemize



@example
$q->where('column', '=', 'value');
$q->where('column', 'between', [10, 20], 'or', true); // or not between 10-20
@end example


We can skip operator and write value instead (but in this case,
we cant modify $how and $not values)


@example
$q->where('column', 'value'); // column = value
@end example


_@math{_call}() function simplify where call for us. We can concatenate
more words for method name to get what we want: (Order is important!)
@table @samp
@item or
if we want connect this condition with OR (optional)
@item not
if we want negate this condition (optional)
@item where / having
one of them
@item column name
Column name in camelCase will be transformed
into snake@math{_case} (optional)
@end table


When we call this special method, we need to pass folowing arguments:
@itemize
@item
column (if it is not passed yet)
@item
operator (required)
@item
value (required)
@end itemize



@example
$q->whereId(1); // operator is skipped
$q->whereId('=', 1); // same thing
$q->whereAge('between', [10, 20]); // AND age between 10 and 20
$q->notWhereAge('between', [10, 20]); // AND NOT age between 10 and 20
$q->orNotWhereAge('between', [10, 20]); // OR NOT age between 10 and 20
$q->orWhere('specialColumn', 3); // AND specialColumn = 3
@end example

@enumerate
@item
Operators

Default operators are:
@table @samp
@item IN
If value is array
@item IS
If value is null
@item =
For all other values
@end table


Special operators:
@table @samp
@item BETWEEN
it needs an array of two values for value
@end table

All other operators are transformed to upper case. Operator is
not escaped or treated specially. It is concatenated to SQL
statement like raw value. We can write into whatever we want
(spaces and comment too@dots{} please don't do any stupid)

@item
Special use of where - parentheses

If we want determine operators priority, we can use where()
function to put conditions in parentheses.


@example
// WHERE active = true AND age = 10 OR age = 11
$q->whereActive(true)
    ->whereAge(10)
    ->orWhereAge(11);

// WHERE active = true AND (age = 10 OR age = 11)
$q->whereActive(true)
    ->where(function ($q) @{
	$q->whereAge(10)
	    ->orWhereAge(11);
    @});

// High order function example
function find_best($sex) @{ return function($q) use ($sex) @{ /* ... */ @} @}
$q->where(find_best('female'));
@end example

In this example, all where conditions (not having) is putted into
parens. In inner function we still can do whatever we want with
query (order by, having, limit, @dots{}), if we really want this@dots{}
@end enumerate

@node GroupBy
@subsection GroupBy

If we use having from previous chapter, we need first group some
data.

@itemize
@item
groupBy(Column $column)
@end itemize


This is it. If we want group more columns, we can call groupBy()
more times.

@node Order
@subsection Order

@itemize
@item
orderBy(Name $column, $dir = 'asc')
@end itemize



@example
$q->orderBy('model')
    ->orderBy('year', 'desc');

// ORDER BY model asc, year desc
@end example

@node Limit
@subsection Limit

@table @samp
@item limit(int $count, $offset = null)
Standard limit
@item offset(int $offset)
If limit is not specified yet it will be set to 1
@item page(int $page, int $per@math{_page} = null)
First argument is page
number (starting with 1), second argument is page size.
@end table



@example
$q->limit(4); // LIMIT 4
$q->limit(4, 6); // LIMIT 4 OFFSET 5
$q->offset(3); // LIMIT 1 OFFSET 3
// ^ Actually limit should be 4, becouse we set it in second row

/* Page size = 10
 *
 * Page:
 * 1. 0-9
 * 2. 10-19
 * 3. 20-29
 */ 
$q->page(3, 10); // LIMIT 10 OFFSET 20
@end example

@node Union
@subsection Union

@itemize
@item
union(Query $q)
@item
unionAll(Query $q)
@end itemize



@example
$q->union(Query::select()->from('table')->limit(1));

// If we are more comfortable with callback, we can use it:
$q->union(function() @{
    return Query::select()
	->from('table')
	->limit(1);
@});
@end example

@node Query parts
@section Query parts

Query parts are stored in @indicateurl{System/Database/Parts/}. We can construct
them with $part = OutPart::ensure(['construct', 'values']); or via
constructor $part = new OurPart('construct', 'values');

If Part is defined before Query method parameter (in this doc),
value will be passed through Part::ensure($value) function. If
value is already part (maybe Raw), ensure will not touch it,
otherwise value will be constructed into declared Part.


@example
Column::ensure('col'); /* is same as */ Column::ensure(['col']);

$q->where('col', '=', 24);

/*
 * So, because where is declared as: where(Column $c, $op, Value $v)
 * 'col' will be transformed with Column::ensure('col')
 * and 24 with Value::ensure(24);
 */

// If we want create Column like: new Column('table', 'col', 'alias');
$q->where(['table', 'col'], ...);

// becouse we can construct Column like: new Column('table.col alias'):
$q->where('table col');

// If we pass our own part into where, Column::ensure will skip it
$q->where(new Raw('COUNT(*)'), 5)
@end example

We can pass alias into where column too, but we don't want to.
@menu
* Raw::
* Literal::
* Value::
* Fn::
* Column::
* Name::
* JoinCondition::
* Table::
@end menu

@node Raw
@subsection Raw

Arguments: (string $raw@math{_value})

In raw we pass raw sql.

@example
$q->select(new Raw('COUNT(*) count'))->from('table');
@end example

@node Literal
@subsection Literal

Arguments: (mixed $value)

Literal ensure that passed value will be properly
quoted. Following methods are predefined:
@table @samp
@item Literal::wild()
new Raw('*')
@item Literal::null()
new Literal(null)
@item Literal::true()
new Literal(true)
@item Literal::false()
new Literal(false)
@end table


We can pass into literal any value, and it will appear in sql
statement:

@example
$q->select(Literal::wild())
    ->where('active', Literal::true())
    ->notWhereLastLogin(Literal::null())
    ->where('string', new Literal('this is string'))
    ->where('age', 'IN', new Literal([20, 21, 22])); // We must write
						     // IN operator,
						     // becouse
						     // Literal is not
						     // recognized as
						     // array
// SELECT * FROM ? WHERE active = true AND NOT WHERE last_login = null AND string = 'this is string' AND age IN [20, 21, 22]
// We should specify IS operator for NULL too!
@end example

If we doesn't use Literal, Query will transform values into Value
part, which uses placeholders.

@example
$q->select(Literal::wild())
    ->where('active', true)
    ->notWhereLastLogin(null)
    ->where('string', 'this is string')
    ->where('age', [20, 21, 22]);
// SELECT * FROM ? WHERE active = ? AND NOT WHERE last_login IS ? AND string = ? AND age IN [?, ?, ?]
@end example

@node Value
@subsection Value

Arguments: (mixed $value)

All values passed into Query are transformed into Value. Value is
stored into Query bindings and '?' placeholder is inserted into
SQL statement.

@node Fn
@subsection Fn

Arguments: (string $name, @dots{}$args)

Function call:
@table @samp
@item Fn::count(Column $column = null)
(default is Literal::wild())
@item Fn::groupConcat(Column $column, string $sep = ',')
GROUP@math{_CONCAT} function
@end table


Other function call can be constructed via special _@math{_call}() method like:
@table @samp
@item Fn::myOwnFunction(1,2,3)
myOwnFunction(1,2,3);
@item Fn::THIS@math{_IS}@math{_FN}(1,'string',new Value(24))
THIS@math{_IS}@math{_FN}(1,'string',?);
@end table

@node Column
@subsection Column

Arguments: (string $table@math{_or}@math{_column},  string $column = null, string $alias = null)

Column is part which represent column name with table (optional)
and alias (optional).

We can construct it in more ways:
@itemize
@item
new Column('table', 'column', 'alias')
@item
new Column('table', 'column')
@item
new Column(null, 'column', 'alias')
@item
new Column('table.column alias')
@item
new Column('table.column', null, 'alias')
@end itemize


Becouse what we give into query, is passed through
Column::ensure() function, we can define column in next ways:

@example
$q->select('table.column alias', ['table', 'column'], ['t', 'c', 'als'], [null, 'col', 'alias'], 'col alias');
@end example

@node Name
@subsection Name

Arguments: (string $name)

Name is like Column, but it doesn't have table and alias. It is
used for column and table names.

@node JoinCondition
@subsection JoinCondition

Arguments: (Name $col1, $operator = null, Name $col2)

Join condition can be ON (c1 = c2) or USING (c).

@example
echo new JoinCondition('col1', '=', 'col2'); // ON `col` = `col2`
echo new JoinCondition('col1', 'col2'); // same thing
echo new JoinCondition('col'); // USING (`col`)
@end example

Column names are automatically escaped, becouse they are
transformed into Name part.

@node Table
@subsection Table

Arguments: (Name or Query $table,  Name $alias = null)

Table is used to specify source of data. It is used in join
method.


@example
$q->join(new Table(Query::select()->from('tbl'), 'alias'));
$q->join(new Table('table', 'alias'));
$q->join(new Table('tbl', 'alias'));
$q->join(new Table('tbl'));

// Becouse join already make Table part, we can skip new Table:
$q->join([Query::select()->from('tbl'), 'alias']);
$q->join(['table', 'alias']);
$q->join(['tbl', 'alias']);
$q->join(['tbl']); /* same as */ $q->join('tbl');
@end example

@node Inserting data
@section Inserting data

@enumerate
@item
We can insert full row: $data1 = [1, 2, 'value'];
@item
We can insert key=>value row with default data: $data2 = ['text' => 'value'];
@end enumerate


@example
Query::insert('table', $data1);
Query::insert('table', $data2);
// Dont forget to execute query...

// We can insert even more data at once
Query::insert('table', [$data1, $data1, $data1]); // id conflict with maybe
Query::insert('table', [$data2, $data2, $data]);

// But all data in query must have same format (full-row or key-value)
@end example

@node Updating data
@section Updating data

@example
$q = Query::update('table', [
    'col' => 'new value',
    'col2' => 'new value',
    'col3' => Fn::CONCAT('col4', 'col5')
]);

// if we forget something
$q->set('ups', null);

// Add filter
$q->whereId(3);
@end example

For filters documentation check @ref{Where and Having,Where and Having} chapter.

@node Working with schema
@chapter Working with schema

For manipulating database schema, we have next queries:
@table @samp
@item ::drop()
@indicateurl{System/Database/Query/Drop.php}
@item ::create()
@indicateurl{System/Database/Query/Create.php}
@item ::alter()
@indicateurl{System/Database/Query/Alter.php}
@end table
@menu
* Droping table::
* Creating table::
* Alter table::
@end menu

@node Droping table
@section Droping table

@example
Query::drop('table');
Query::drop('table')->ifExists();
@end example

@node Creating table
@section Creating table

@example
$q = Query::create('table_name', function($q) @{
    $q->integer('id')->primary();
    // ... other column definitions
@});

$q->ifNotExists();
// other table properties
@end example
@menu
* Column types::
* Column modifiers::
* Column references::
* Table modifiers::
@end menu

@node Column types
@subsection Column types

Query support next column types:
@example
$q->boolean('true_false');
$q->enum('sex', 'male', 'female', 'alien');
$q->set('digits', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
$q->smallInt('small');
$q->mediumInt('medium');
$q->integer('int');
$q->bigInt('big');
$q->decimal('decimal', $precision = 10, $scale = 5);
$q->vachar('varchar', 255);
$q->varchar('text');
$q->timestamp('timestamp');
$q->time('time');
$q->date('date');
$q->datetime('date_time');
$q->year('year');
@end example

Some of them are not supported on all databases. For enum and set
are used varchar on sqlite database. (Check
@indicateurl{Database/Parts/Sqlite/ColumnDef.php} implementation.)

@node Column modifiers
@subsection Column modifiers

Columns can have next modifiers:

@example
$col = $q->integer('int_col');
$col->unsigned(); // unsigned value
$col->nullable(); // default is not null
$col->default(24); // default is null
$col->primary(); // primary key
$col->autoincrement();
$col->unique(); // unique index
@end example

@node Column references
@subsection Column references

We can make reference to other column:

@example
Query::create('table', function($q) @{
    $q->integer('id')->primary()->autoincrement();
@});

Query::create('table2', function($q) @{
    $q->integer('id')->primary()->autoincrement();
    $q->integer('id_table')->references('table.id');
@});
@end example

@node Table modifiers
@subsection Table modifiers

Table can have modifiers too:

@example
$table = Query::create('table', function($q) @{ /* ... */ @});
$table->temporary(); // create table in memory
$table->ifNotExists(); // skip if already exists

$table->option('key', 'value'); // custom option KEY VALUE

// Some of options are predefined
$table->engine('MyIsam'); // ENGINE=MyIsam
$table->charset('utf-8'); // CHARSET SET 'utf-8'
$table->defaultCharset('utf-8'); // DEFAULT CHARSET SET 'utf-8'
@end example

@node Alter table
@section Alter table

Alter is buggy and untested, please report bugs.

@example
Query::alter('table')->addColumn('new_column', 'varchar', 255);
Query::alter('table')->addColumn('new_int_col', 'integer')->nullable();
@end example

@example
Query::alter('table')->modifyColumn('existing_column', 'text')->nullable(false);
Query::alter('table')->modifyColumn('existing_int_column', 'bigInt')->default(123);
@end example

@example
Query::changeColumn('existing_column', 'new_name', 'varchar', 255)->nullable();
@end example

@node Executing queries
@chapter Executing queries

If we want execute query without needed any data in result, we
simply call:

@example
$q->execute();
@end example

Otherwise we use method ->fetch() to get next result. If we want all
results in one call we use method ->fetchAll() which works exactly
same way exept it returns all result in one array.

Fetch has first argument for specify which columns we want in
result. If single column is passed single value is returned (scalar)
if array is passed, array of values is returned.


@example
$q->select('type', 'count')->from('table');

// Get first column
while ($type = $q->single()) @{
    echo "Type: $type\n";
@}

// Get one (named) column
while ($res = $q->get('count')) @{
    echo "One column (count): $count\n";
@}

// Get more columns
while ($res = $q->get(['type', 'count'])) @{
    echo "@{$res['type']@} = @{$res['count']@}\n";
@}

// Get row as object
while ($res = $q->get()) @{
    echo "@{$res->type@} = @{$res->count@}\n";
@}
@end example


@example
$q->select('type', 'count')->from('table');

// Get first column
foreach ($q->singleAll() as $type) @{
    echo "Type: $type\n";
@}

// Get one (named) column
foreach ($q->all('count') as $res) @{
    echo "One column (count): $count\n";
@}

// Get more columns
foreach ($q->all(['type', 'count']) as $res) @{
    echo "@{$res['type']@} = @{$res['count']@}\n";
@}

// Get row as object
foreach ($q->all() as $res) @{
    echo "@{$res->type@} = @{$res->count@}\n";
@}


// Custom result transformation
$results = $q->all(['type', 'count'], function ($row) @{
    return $row['type'] . ' => ' . $row['count'];
@});
echo implode("\n", $results);
@end example

@node Working with objects
@chapter Working with objects

PHP PDO library has option to pack received data into an object. So
if we use this feature we can fetch data like this:

@example
$class = $q->fetch(MyClass::class);
assert($class instanceof MyClass);
@end example

But, we want using object to represent one row in database. For this
purpose each class must have defined table name and primary key.
@menu
* Using objects::
* Name conflicts::
* Joining with objects::
@end menu

@node Using objects
@section Using objects

Table name is class name in snake@math{_case} and primary key is 'id'. We
can change that with implement methods which returns table name and
primary key.


@example
class MyTable @{
    public static function tableName() @{
	return 'my_table_v2';
    @}

    public static function primaryKey() @{
	return 'id_my_table';
    @}
@}
@end example

Even if class doesn't have these two methods, we can accessing to
its table name and primary. But it must extends from QueryObject
class.

@example
class QueryObject @{
    public static function primaryKey() @{
	return 'id';
    @}

    public static function tableName() @{
	return snake_case(static::class);
    @}
@}
@end example


When we done this, we doesn't need to remember table names any more:

@example
Query::select()
    ->from(User::class)
    ->whereId(3)
    ->fetch(User::class);
@end example

NOTE: id is still column `id`. If we want find user by primary key,
we should write: ->where(user::primaryKey(), 3)

In background Name and Column part check if table is a class and
replace it with Class::tableName().


@example
$q = Query::select('Obj.id objid', 'name')
   ->from(Obj::class)
   ->join(Obj2::class, ['Obj2.id_obj', 'Obj.id']) // id is not necessary primary
   ->where('Obj2.something', true)
   ->orderBy('Obj2.sort')
   ->fetch(['objid', 'name']);
@end example

There is only one problem. Obj::class could have namespaces
A. In this case, Query will not found Obj class, because it
doesn't exists in Query package. So, when new object is declared (in
from or join method), Query will create alias in one of his sub
namespaces. When column is referencing a class, Query will look in
this namespace if it exists.

@node Name conflicts
@section Name conflicts

Maybe you think, what if I use two classes with same name in
different namespaces?

@example
namespace General @{
    class User @{ @} // tablename = users
@}

namespace Deleted @{
    class User @{ @} // tablename = deleted_users
@}

Query::select()
    ->from(General\User::class)
    ->from(Deleted\User::class)
    ->where('User.id', 3); // which one?
@end example

If you really want to have same object names, you can create
class@math{_alias}(Existing::class, 'NewName') and use alias.

There is no problem using objects with same names on different
databases. Query handle that properly.

@example
$q1 = Query::select()
    ->from(mysql\User::class)
    ->where('User.id', 1); // referencing Query\Aliases\Mysql\User -> mysql\User

$q2 = Query::select()
    ->from(sqlite\User::class)
    ->where('User.id', 1); // referencing Query\Aliases\Sqlite\User -> sqlite\User

Query::withConnection('mysql', function() @{
    $q1->fetch();
@});

Query::withConnection('sqlite', function() @{
    $q2->fetch();
@});
@end example

Different connections will have different namespaces (eg:
Query\<Connection>\<Alias>) for used object aliases. But one
connection must have unique names for objects.


This was a long chapter.

@node Joining with objects
@section Joining with objects

Joins from previous chapter works, but they are not good. We still
need to know relation between objects, their table names and their
id columns.

@example
Query::select()
    ->from(User::class)
    ->join(Group::class, ['group.id', 'user.group_id']);
@end example

If we want write this right, we should do it in that way:

@example
Query::select()
    ->from(User::class)
    ->join(Group::class, [Group::class . '.' . Group::primaryKey(),
			  User::class . '.group_id']);
@end example

Uff@dots{} and we still need to know `group@math{_id'} column everywhere in
code.
@menu
* Relation definitions::
@end menu

@node Relation definitions
@subsection @strong{TODO} Relation definitions

Basic idea is to write join definition into model and then use it
all over the code.

@example
class User extends QueryObject @{
    protected class refGroup() @{
	return Reference::toOne(Group::class, 'id_group');
    @}
@}

class Group extends QueryObject @{
    protected class refUsers() @{
	return Reference::toMany(User::class, 'id_group');
    @}
@}
@end example

Now we can start joining:

@example
Query::select('g.name')
    ->from(User::class)
    ->join('User.group g');
// and
Query::count()
    ->from(Group::class, 'g')
    ->join('Group.users')
    ->where('g.name', 'Guest')
    ->single();
@end example

Problems:
@itemize
@item
Table can be aliased
@item
@dots{}
@end itemize

@enumerate
@item
Devel

@example
class Model @{
    public function tableName() @{
	return 'ime_tabele';
    @}
    public function primary() @{
	return 'ID_ime_tabele';
    @}
@}
@end example

@example
class Query @{
    private $components = [];   // Unused...
    private $bindings = [];
    private $sources = [
	'table or alias' => 'source info',
	'alias' => 'table_name',
	'table_name2' => 'table_name2',
	// 'g' => new Source('groups', 'g')
    ];
    private $select = [
	'name' => 'whatever(*)',
	'count' => new Column(),
	'xxx' => new Raw()
    ];
@}
@end example


@example
abstract class Source @{
    private $name;

    public function __construct($name) @{
	$this->name = $name;
    @}

    public function name() @{
	return $this->name;
    @}

    abstract public function primary();

    public function debug() @{
	echo "Table: `" . $this->name() . "` primary: `" . $this->primary() . "`\n";
    @}
@}
@end example

@example
class TableSource extends Source @{
    private $table;

    public function __construct($table, $name = null) @{
	parent::__construct($name ?: $table);
	$this->table = $table;
    @}

    public function primary() @{
	return 'id';
    @}
@}
@end example


@example
class ModelSource extends TableSource @{
    private $model;

    public function __construct($model, $name = null) @{
	$this->setModel($model);
	parent::__construct($model::tableName(), $name);
    @}

    private function setModel($model) @{
	// if (class_exists($model) and is_subclass_of($model, QueryObject::class)) @{
	if (class_exists($model)) @{
	    $this->model = $model;
	@} else @{
	    throw new Exception("Wrong class name '$model'"); // Should be QueryException
	@}
    @}

    public function primary() @{
	$m =  $this->model;
	return $m::primary();
    @}
@};
@end example

@example
@{
    $s1 = new ModelSource(Model::class);
    $s2 = new ModelSource(Model::class, 'alias');
    $s3 = new TableSource('tabela', 'alias');
    echo "\n";
    $s1->debug();
    $s2->debug();
    $s3->debug();
@}
@end example
@end enumerate

@node QueryObject
@chapter QueryObject

If we want using objects in Query, they must extends QueryObject. If
we want different tablename or primary key for object, we can
override tableName() or primaryKey() function.

In case we want totaly different rules to generate tablenames and
primary keys, we can use our own QueryObject class which extends
original QueryObject.

@example
class QueryObject @{
    public static function tableName() @{
	return camel_case(drop_namespace(QueryObject::class));
    @}

    public static function primaryKey() @{
	return 'id';
    @}
@}
@end example

@c Emacs 25.1.1 (Org mode 8.2.10)
@bye